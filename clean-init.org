* PACKAGES
#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
  (package-initialize)
#+end_src

* APPEARANCE
** GENERAL
#+begin_src emacs-lisp
    (scroll-bar-mode -1)
    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (show-paren-mode 1)
    (delete-selection-mode t)
    (global-visual-line-mode t)
    (setq inhibit-startup-screen t)
    (display-time-mode 1)
    (display-battery-mode 1)
    (setq initial-buffer-choice "~/Dropbox/org/org-todo/todo.org")
#+end_src
** HIGHLIGHT-MODE
#+begin_src emacs-lisp
  (setq global-hl-line-mode t)
  (setq hl-line-range-function 'highlight-visual-line)
  (defun highlight-visual-line ()
    (save-excursion
      (cons (progn (beginning-of-visual-line) (point))
            (progn (end-of-visual-line) (point)))))
  (custom-set-faces
   '(hl-line ((t (:extend t :background "black" :weight semi-bold)))))
#+end_src
** DIRED
#+begin_src emacs-lisp
  (put 'dired-find-alternate-file 'disabled nil)
  (add-hook 'dired-mode-hook
            (lambda ()
              (dired-hide-details-mode)))
#+end_src
** SOLARIZED-THEME
#+begin_src emacs-lisp
  (add-to-list 'custom-theme-load-path "~/.emacs.d/custom-packages/emacs-color-theme-solarized")
  (load-theme 'solarized t)
  (customize-set-variable 'frame-background-mode 'dark)
#+end_src
* ORG
** ORG-GENERAL
#+begin_src emacs-lisp
  (setq org-clock-into-drawer "TIME")
  (setq org-log-into-drawer t)
  (setq org-startup-with-inline-images t)
  (setq org-image-actual-width nil)
  (setq org-indent-mode t)
  (setq org-startup-indented t)
  (setq org-startup-folded t)
#+end_src
** ORG-EXTRA
#+begin_src emacs-lisp
  (require 'ox-extra)
  (ox-extras-activate '(ignore-headlines))
#+end_src
** ORG-AGENDA
#+begin_src emacs-lisp
  (add-hook 'org-agenda-mode-hook
            (lambda ()
              (visual-line-mode -1)
              (toggle-truncate-lines 1)))

  (setq org-agenda-window-setup 'only-window)
  (setq org-agenda-files
        '("~/Dropbox/org/org-todo/todo.org"))
#+end_src

** ORG-ROAM
*** ORG-ROAM
#+begin_src emacs-lisp
  (setq org-roam-directory "~/Dropbox/org/org-roam/")
  (setq org-roam-index-file "~/Dropbox/org/org-roam/index.org")
  (add-hook 'after-init-hook 'org-roam-mode)
  (setq org-roam-completion-system 'helm)
  (setq org-roam-db-update-method 'immediate)
  (setq org-roam-capture-templates
        '(("d" "default" plain (function org-roam--capture-get-point)
           "%?"
           :file-name "~/Dropbox/org/org-roam/permanent-notes/%<%Y%m%d%H%M%S>"
           :head "#+TITLE: %<%Y%m%d%H%M%S>\n#+ROAM_TAGS: =PER= %^{TAGS}\n"
           :unnarrowed t)))
#+end_src

*** ORG-ROAM-BIBTEX
#+begin_src emacs-lisp
  (require 'org-roam-bibtex)
  (add-hook 'after-init-hook #'org-roam-bibtex-mode)
  (setq orb-include-citekey-in-titles t)
  (setq orb-templates
        '(("r" "ref" plain (function org-roam-capture--get-point) ""
           :file-name "~/Dropbox/org/org-roam/reference-notes/${citekey}"
           :head "#+TITLE: ${citekey}: ${title}\n#+ROAM_KEY: ${ref}\n#+ROAM_TAGS: =REF= %^{TAGS}\n#+DATE_ADDED: %<%Y-%m-%d>\n" ; <--
           :unnarrowed t)))
#+end_src
*** ORG-ROAM-DAILIES
#+begin_src emacs-lisp
  (setq org-roam-dailies-directory "~/Dropbox/org/org-roam/fleeting-notes")
  (setq org-roam-dailies-capture-templates
           '(("f" "fleeting-notes" entry
              #'org-roam-capture--get-point
              "*  %?"
              :file-name "~/Dropbox/org/org-roam/fleeting-notes/%<%Y-%m-%d>-fleeting-note"
              :head "#+TITLE: %<%Y-%m-%d>-fleeting-note\n#+ROAM_TAGS: =FLE=\n")))
#+end_src
** ORG-REF
#+begin_src emacs-lisp
  (require 'org-ref)
  (setq bibtex-completion-bibliography "~/Dropbox/academic_stuff/bibliography/bibliography.bib"
        bibtex-completion-notes-path "~/Dropbox/academic_stuff/bibliography/bibliography.bib")
  (setq reftex-default-bibliography '("~/Dropbox/academic_stuff/bibliography/bibliography.bib"))
  (setq org-ref-default-bibliography '("~/Dropbox/academic_stuff/bibliography/bibliography.bib"))
  (setq org-ref-cite-onclick-function 'org-ref-cite-click-helm)
  (setq org-ref-insert-cite-function 'org-ref-helm-insert-cite-link)
  (setq org-ref-insert-label-function 'org-ref-helm-insert-label-link)
  (setq org-ref-insert-link-function 'org-ref-helm-insert-cite-link)
  (setq org-ref-insert-ref-function 'org-ref-helm-insert-ref-link)
  (setq org-ref-notes-function 'orb-notes-fn)
  (setq org-ref-default-citation-link "citealt")
#+end_src
** ORG-LATEX-EXPORT
#+begin_src emacs-lisp
  (setq org-latex-pdf-process
        '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "bibtex %b"
          "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+end_src

** ORG-CAPTURE-TEMPLATES
#+begin_src emacs-lisp
  (defun org-capture-at-point ()
    "Insert an org capture template at point."
    (interactive)
    (org-capture 0))
  (setq org-capture-templates
        '(("w" "weekly-review" plain
           (file "~/Dropbox/org/org-todo/weekly-review.org")
           (file "~/Dropbox/org/org-templates/weekly-review.txt"))
          ("n" "bib-note-macro" plain
           (file "~/Dropbox/org/org-todo/weekly-review.org") ;;just a placeholder
           (file "~/Dropbox/org/org-templates/bib-note-macro.txt"))
	      ("p" "paper-setup" plain
           (file "~/Dropbox/org/org-todo/weekly-review.org")
           (file "~/Dropbox/org/org-templates/paper-setup.txt"))
          ("b" "bible-words" plain
           (file "~/Dropbox/academic_stuff/languages/bible-words-chinese/bible-words-chinese.csv")
           (file "~/Dropbox/org/org-templates/bible-words-chinese.txt"))))
#+end_src

** ORG-JOURNAL
#+begin_src emacs-lisp
  (require 'org-journal)
  (setq org-journal-dir "~/Dropbox/org/org-journal/")
  (setq org-journal-date-format "%a, %Y-%m-%d")
  (setq org-journal-file-format "%Y-%m-%d-journal.org")
#+end_src
* UTILS
** NEOMUTT
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("/neomutt" . org-mode))
#+end_src
** SPELLING
#+begin_src emacs-lisp
  (setq ispell-dictionary "en_GB")
  (add-hook 'text-mode-hook 'flyspell-mode)
  (add-hook 'prog-mode-hook 'flyspell-prog-mode)
#+end_src
** EVIL-MODE
*** EVIL-BASIC
#+begin_src emacs-lisp
  (require 'evil)
  (evil-mode 1)
  (setq evil-want-C-i-jump nil)
  (setq evil-respect-visual-line-mode t)
  (setq evil-move-cursor-back nil)
#+end_src
*** EVIL-ORG
#+begin_src emacs-lisp
  (require 'evil-org)
  (add-hook 'org-mode-hook 'evil-org-mode)
  (evil-org-set-key-theme '(navigation insert textobjects additional calendar))
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys)
#+end_src
*** KEY-CHORD 
#+begin_src emacs-lisp
  (require 'key-chord)
  (setq key-chord-two-keys-delay 0.5)
  (key-chord-define evil-insert-state-map "jj" 'evil-normal-state)
  (key-chord-mode 1)
#+end_src

* KEY-BINDINGS
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c w") 'count-words-region)
  (global-set-key (kbd "C-c m") 'rectangle-mark-mode)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c j") 'org-journal-new-entry)
  (global-set-key (kbd "C-c p") 'org-pomodoro)
  (global-set-key (kbd "C-c r") 'org-roam-find-file)
  (global-set-key (kbd "C-c i") 'org-roam-insert)
  (global-set-key (kbd "C-c l") 'org-roam)
  (global-set-key (kbd "C-c c") 'org-ref-insert-link)
  (global-set-key (kbd "<f6>") 'org-capture)
  (global-set-key (kbd "C-c o") 'org-wc-display)
  (global-set-key (kbd "C-c n") #'org-capture-at-point)
  (global-set-key (kbd "C-c e") 'evil-mode)
  (global-set-key (kbd "C-c d") 'org-roam-dailies-capture-today)
  (global-set-key (kbd "C-c x") 'org-roam-jump-to-index)
#+end_src



